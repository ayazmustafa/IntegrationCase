Redis: (https://redis.io/docs/latest/develop/use/patterns/distributed-locks/)
I chose redis for simplicity reasons(for POC code). But i don't know the non-functional requirements or the data we want to write/read is so important. (https://redis.io/docs/latest/operate/oss_and_stack/management/persistence/)

- Very high concurrency might still lead to performance issues due to lock contention.
- Acquiring and releasing locks through Redis adds network latency and can become a bottleneck under high load.
- If the lock timeout is not appropriately configured, it can lead to either premature lock release or excessively long lock holding.
- If the distributed cache goes down, the system will not be able to process any requests.
- Redis doesn't use consensus protocols like paxos/raft, so it contains risks if the data we wanna write is important. (Martin Kleppman explains it well https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html)
- We could use redis sentinel to reach HA. But it doesn't make it distrubuted. It just provides master-replication mechanizm (no multi master). Redis cluster is a distrubuted redis implementation but it offers you eventual consistency. Anyway, redis doesn't provide strong consistency by default because of speed reasons. So you need to sync replications and this is a long process in case of redis. 